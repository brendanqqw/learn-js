JSON (JavaScript Object Notation)
Is a file format that is commonly used in transporting data, via API or other means

JSON 
A JSON Data should have a key | value pair and a colon : in the middle
JSONs should be surrounded by {}

let person = {firstname: "Brendan"};
    variable    key         value

A JSON can have mulitple JSON Data by using commas as separators.
JSONs should be surrounded by {}.


//JSON Example
let person = {
  firstName: "John",
  lastName: "Doe",
  age: 25,
};


A JSON can also have arrays as its value.

let person = {
  firstName: "John",
  lastName: "Doe",
  age: 25,
  hobbies: ["coding", "eating", "sleeping"],
};

console.log(person);


//A JSON can also have JSONs as its value

let person = {
  firstName: "John",
  lastName: "Doe",
  age: 25,
  hobbies: ["coding", "eating", "sleeping"],
  pets: {
    0: {
      name: "Rex",
      type: "Dog",
      breed: "German Shepherd",
    },
    1: {
      name: "Fluffy",
      type: "Cat",
      breed: "Siamese",
    },
  },
};

console.log(person);


//JSON Read
You can READ specific values of a JSON by using its key surrounded by []

let person = {
  firstName: "John",
  lastName: "Doe",
  age: 25,
};

console.log(person["firstName"]);
console.log(person["lastName"]);



//You can also READ specific values of a JSON by using a persion followed by the key
let person = {
  firstName: "John",
  lastName: "Doe",
  age: 25,
};

//Only Works on a "String" Key
console.log(person.firstName);
console.log(person.lastName);



//Another Example
let person = {
  firstName: "John",
  lastName: "Doe",
  age: 25,
};

//Only Works on a "String" Key
console.log(`${person.firstName} ${person.lastName}`);
//Output: John Doe

console.log(person.3);
//Output error because it is not a string key

console.log(person["3"]);
//Output: 25 shows the value of the key 3 because it is a string key


*USE  BRACKETS FOR NUMBER AND USE DOT NOTATION FOR STRINGS*



//JSON Read
You can read array values in a JSON by using its key and accessing
it normally by index.

let person = {
  firstName: "John",
  lastName: "Doe",
  age: 25,
  hobbies: ["Coding", "Eating", "Sleeping"],
};

console.log(person["hobbies"][0]); //Explanation: We can access the array elements using the index number. In this case, the index number is 0. So, it will print "Coding" in the console.
console.log(person.hobbies[1]); //Explanation: We can also access the array elements using the dot notation. In this case, the index number is 1. So, it will print "Eating" in the console.


//You can read JSON values in a JSON by using its key and accessing it normally by key.
let person = {
  firstName: "John",
  lastName: "Doe",
  age: 25,
  hobbies: ["coding", "eating", "sleeping"],
  pets: {
    0: {
      name: "Rex",
      type: "Dog",
      breed: "German Shepherd",
    },
    1: {
      name: "Fluffy",
      type: "Cat",
      breed: "Siamese",
    },
  },
};

console.log(person["pets"][0]["name"]); //Explanation: person["pets"] returns the pets object, then we access the first pet object using the index 0, and then we access the name property of the first pet object.
console.log(person.pets[1].breed); // Explanation: person.pets returns the pets object, then we access the second pet object using the index 1, and then we access the breed property of the second pet object.



//JSON WRite
You can UPDATE specific values of a JSON by uisng its key surrounded by []
and assigning a value to it.

//Update Existing "key | value"
person["firstName"] = "Brendan"; //Explanation: adds a new key | value to the object
//person.firstName = "Brendan"; Same Concept
console.log(person); //Output: {firstName: "Brendan", lastName: "Doe", age: 25}

//Create New Key | Value"
person["middleInitial"] = "B"; //Explanation: adds a new key | value to the object
person.middleInitial = "B"; // Same Concept
console.log(person); //Output: {firstName: "Brendan", lastName: "Doe", age: 25, middleInitial: "B"}

console.log(person.hobbies); //Output: ["reading", "coding", "swimming"]
person.hobbies[0] = "Writing";
//person.hobbies[0] = "Playing" //Same Concept
console.log(person.hobbies); //Output: ["Writing", "coding", "swimming"]


Assigning a value to a non-existenst key will result into adding it.



//JSON Stringify
You can convert JSON into string by using the JSON.stringify() method

let person = {
  firstName: "John",
  lastName: "Doe",
  age: 25,
};

console.log(person);
let strPerson = JSON.stringify(person); //Explanation: JSON.stringify() method converts a JavaScript object or value to a JSON string
//Turns the person object into a JSON string
console.log(strPerson); //Output: {"firstName":"John","lastName":"Doe","age":25}


//JSON Parsing
You can convert valid Strings into JSON by using JSON.parse() method.

let strPerson = `{"firstName":"John", "lastName":"Doe", "age":25}`; // a string with JSON data

let person = JSON.parse(strPerson); // convert the string into a JavaScript object
console.log(person);

If a string is invalid it would throw an error at the console.


//JSON array
You can also create an Array of JSONs. Which can be manipulated the same as any other arrays.

let people = [
  {
    firstName: "John",
    lastName: "Doe",
    age: 50,
  },
  {
    firstName: "Anna",
    lastName: "Smith",
    age: 25,
  },
  {
    firstName: "Peter",
    lastName: "Jones",
    age: 30,
  },
];
console.log(people); // Array(3) [Object, Object, Object]
console.log(people[1].firstName); // Anna
console.log(`${people[1].firstName} ${people[1].lastName}`); // Anna Smith

